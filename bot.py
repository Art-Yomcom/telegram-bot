from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import asyncio
import logging
from quart import Quart, request
from database import get_joke

TOKEN = "7840680184:AAFfkLbKJQinFyKwlz4Os82Y12on7rRGBIU"  # –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
WEBHOOK_URL = "https://67e6-185-200-107-86.ngrok-free.app/webhook/"  # –ü–æ–ª–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞
WEBHOOK_PATH = "/webhook/"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏
buttons = ["–í–æ–≤–æ—á–∫–∞", "–®—Ç–∏—Ä–ª–∏—Ü", "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏", "–í—Å—ë –Ω–∞ —Å–≤–µ—Ç–µ"]
keyboard = ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text=b)] for b in buttons], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    logging.info(f"User {message.from_user.id} started the bot")
    welcome_text = "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–∏—Ä–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–Ω–µ–∫–¥–æ—Ç–∞:"
    await message.answer(welcome_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text in buttons)
async def send_joke(message: types.Message):
    try:
        logging.info(f"User {message.from_user.id} requested a joke from category: {message.text}")
        joke = get_joke(message.text)
        if joke:
            await message.answer(joke)
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∞–Ω–µ–∫–¥–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω üòî")
            logging.warning(f"No joke found for category: {message.text}")
    except Exception as e:
        logging.error(f"Error sending joke: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ üòî")

# Quart –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
app = Quart(__name__)

@app.route(WEBHOOK_PATH, methods=["POST"])
async def webhook():
    try:
        logging.info("Received a webhook update")
        update = types.Update.model_validate(await request.json)
        await dp.feed_update(bot, update)
        return "OK", 200
    except Exception as e:
        logging.error(f"Error processing webhook: {e}")
        return "Internal Server Error", 500

async def main():
    logging.basicConfig(level=logging.INFO)
    await bot.delete_webhook(drop_pending_updates=True)  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫
    try:
        await bot.set_webhook(WEBHOOK_URL)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π
        logging.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        await app.run_task(host="0.0.0.0", port=8080)  # –ó–∞–ø—É—Å–∫–∞–µ–º Quart
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
    finally:
        await bot.session.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞

if __name__ == "__main__":
    asyncio.run(main())